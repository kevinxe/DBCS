version: '3.7'

networks:
  my_net:

services:
   
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    container_name: kong-postgres
    restart: on-failure
    networks:
      - my_net
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    command: kong migrations bootstrap
    networks:
      - my_net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    depends_on:
      kong-database:
        condition: service_healthy
          
        
  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    restart: on-failure
    networks:
      - my_net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      kong-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
    networks:
      - my_net
    restart: on-failure
    depends_on:
      kong-database:
        condition: service_healthy
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
      - my_net
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
      NODE_ENV: production
    depends_on:
      kong-database:
        condition: service_healthy
    ports:
      - "1337:1337"


  users-api:
    build: 
      context: ./api-rest/
      dockerfile: Dockerfile
      args:
        MODULE_NAME: user-api
    ports:
      - "8080:8080"
    environment:
      - DB_URL=jdbc:mysql://users-db:3306/users?createDatabaseIfNotExist=true
      - DB_USERNAME=root
      - DB_PASSWORD=root
    depends_on:
      - users-db
    networks:
      - my_net
    restart: on-failure

  users-db:
    image: mysql:5.7
    environment:
      - MYSQL_DATABASE=users
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - users-db-data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - my_net

  vehicles-api:
    build: 
      context: ./api-rest/
      dockerfile: Dockerfile
      args:
        MODULE_NAME: vehicle-api
    ports:
      - "8081:8080"
    environment:
      - DB_URL=jdbc:mysql://vehicles-db:3306/vehicles?createDatabaseIfNotExist=true
      - DB_USERNAME=root
      - DB_PASSWORD=root
    depends_on:
      - vehicles-db
    networks:
      - my_net
    restart: on-failure

  vehicles-db:
    image: mysql:5.7
    environment:
      - MYSQL_DATABASE=vehicles
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - vehicles-db-data:/var/lib/mysql
    ports:
      - "3308:3306"
    networks:
      - my_net

  chargingpoints-api:
    build: 
      context: ./api-rest/
      dockerfile: Dockerfile
      args:
        MODULE_NAME: chargingpoint-api
    ports:
      - "8082:8080"
    environment:
      - DB_URL=jdbc:mysql://chargingpoints-db:3306/chargingpoints?createDatabaseIfNotExist=true
      - DB_USERNAME=root
      - DB_PASSWORD=root
    depends_on:
      - chargingpoints-db
    networks:
      - my_net
    restart: on-failure
    

  chargingpoints-db:
    image: mysql:5.7
    environment:
      - MYSQL_DATABASE=chargingpoints
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - chargingpoints-db-data:/var/lib/mysql
    ports:
      - "3309:3306"
    networks:
      - my_net
      
      
  recharge-api:
   build: 
     context: ./api-rest/
     dockerfile: Dockerfile
     args:
       MODULE_NAME: recharge-api
   ports:
     - "8083:8080"
   environment:
     - DB_URL=jdbc:mysql://recharge-db:3306/recharges?createDatabaseIfNotExist=true
     - DB_USERNAME=root
     - DB_PASSWORD=root
     - CHARGER_LENTO=0.13
     - CHARGER_MEDIA=0.20
     - CHARGER_RAPIDA=0.35
     - CHARGER_ULTRARAPIDA=0.50
   depends_on:
     - recharge-db
   networks:
     - my_net
   restart: on-failure
    

  recharge-db:
    image: mysql:5.7
    environment:
      - MYSQL_DATABASE=recharges
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - recharge-db-data:/var/lib/mysql
    ports:
      - "3310:3306"
    networks:
      - my_net

  angular-frontend:
    build: ./angular
    ports:
      - "4200:80"
    networks:
      - my_net

  authentication-service:
    build: ./login-service
    ports:
      - "3000:3000"
    networks:
      - my_net
    environment:
      - JWT_SECRET=tuSecretoJWT

volumes:
  users-db-data:
  vehicles-db-data:
  chargingpoints-db-data:
  recharge-db-data:
  kong_data:
